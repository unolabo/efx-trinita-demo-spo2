///////////////////////////////////////////////////////////////////////////////////
//  MIT License
//  
//  Copyright (c) 2021 SaxonSoc contributors
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
///////////////////////////////////////////////////////////////////////////////////
//
//  This demo use the I2C peripheral to communicate with a MCP4725 (DAC)
//  It assume it is the single master on the bus, and send frame in a blocking manner.
//
///////////////////////////////////////////////////////////////////////////////////
#include <stdint.h>

#include "bsp.h"
#include "riscv.h"
#include "gpio.h"
#include "i2c.h"
#include "uart.h"
#include "i2cDemo.h"
#include "clint.h"
#include "plic.h"
#include "apb3_cl.h"
#include "Max32664.h"
#define GPIO0       SYSTEM_GPIO_0_IO_CTRL


uint32_t phase = 0;

#ifdef SYSTEM_I2C_0_IO_CTRL

void init(){
    //I2C init
    I2c_Config i2c;
    i2c.samplingClockDivider = 3;
    i2c.timeout = I2C_CTRL_HZ/1000;     //1 ms;
    i2c.tsuDat  = I2C_CTRL_HZ/2000000;  //500 ns
    i2c.tLow  = I2C_CTRL_HZ/800000;     //1.25 us
    i2c.tHigh = I2C_CTRL_HZ/800000;     //1.25 us
    i2c.tBuf  = I2C_CTRL_HZ/400000;     //2.5 us
    i2c_applyConfig(SYSTEM_I2C_0_IO_CTRL, &i2c);
    i2c_applyConfig(SYSTEM_I2C_1_IO_CTRL, &i2c);
}

void trap(){
}

uint16_t ReadInaRegister(uint16_t address)
{
	uint16_t retval;
	uint32_t rd;

	// Pointer set
	i2c_masterStartBlocking(SYSTEM_I2C_1_IO_CTRL);
	i2c_txByte(SYSTEM_I2C_1_IO_CTRL, 0x80); i2c_txNackBlocking(SYSTEM_I2C_1_IO_CTRL);
	i2c_txByte(SYSTEM_I2C_1_IO_CTRL, address); i2c_txNackBlocking(SYSTEM_I2C_1_IO_CTRL);
	i2c_masterStopBlocking(SYSTEM_I2C_1_IO_CTRL);


    // Read Register
    i2c_masterStartBlocking(SYSTEM_I2C_1_IO_CTRL);
    i2c_txByte(SYSTEM_I2C_1_IO_CTRL, 0x81); i2c_txNackBlocking(SYSTEM_I2C_1_IO_CTRL);
    rd = i2c_rxData(SYSTEM_I2C_1_IO_CTRL);
    i2c_txByte(SYSTEM_I2C_1_IO_CTRL, 0xFF); i2c_txAckBlocking(SYSTEM_I2C_1_IO_CTRL);
    retval = i2c_rxData(SYSTEM_I2C_1_IO_CTRL) << 8;
    i2c_txByte(SYSTEM_I2C_1_IO_CTRL, 0xFF); i2c_txNackBlocking(SYSTEM_I2C_1_IO_CTRL);
    retval = retval + i2c_rxData(SYSTEM_I2C_1_IO_CTRL);
    i2c_masterStopBlocking(SYSTEM_I2C_1_IO_CTRL);

	return retval;
}

void WriteInaRegister(uint16_t address, uint16_t data)
{
	uint32_t rd;

	i2c_masterStartBlocking(SYSTEM_I2C_1_IO_CTRL);
	i2c_txByte(SYSTEM_I2C_1_IO_CTRL, 0x80); i2c_txNackBlocking(SYSTEM_I2C_1_IO_CTRL);
	rd = i2c_rxData(SYSTEM_I2C_1_IO_CTRL);

	i2c_txByte(SYSTEM_I2C_1_IO_CTRL, address); i2c_txNackBlocking(SYSTEM_I2C_1_IO_CTRL);
	rd = i2c_rxData(SYSTEM_I2C_1_IO_CTRL);

	i2c_txByte(SYSTEM_I2C_1_IO_CTRL, (data>>8) ); i2c_txNackBlocking(SYSTEM_I2C_1_IO_CTRL);
	rd = i2c_rxData(SYSTEM_I2C_1_IO_CTRL);

	i2c_txByte(SYSTEM_I2C_1_IO_CTRL, (data & 0xFF)); i2c_txNackBlocking(SYSTEM_I2C_1_IO_CTRL);
	rd = i2c_rxData(SYSTEM_I2C_1_IO_CTRL);

	i2c_masterStopBlocking(SYSTEM_I2C_1_IO_CTRL);

}


void Max32664Write(const uint8_t numOfWrites, uint8_t userArray[])
{
    i2c_masterStartBlocking(I2C_CTRL);
    i2c_txByte(I2C_CTRL, 0xAA); i2c_txNackBlocking(I2C_CTRL);

    for (int i=0; i<numOfWrites; i++)
    {
        i2c_txByte(I2C_CTRL, userArray[i]);
    	i2c_txNackBlocking(I2C_CTRL);
    }
    i2c_masterStopBlocking(I2C_CTRL);

	return;
}


uint8_t Max32664Read(const uint8_t numOfReads, uint8_t userArray[])
{
	uint8_t rd;
	uint8_t statusByte;

    i2c_masterStartBlocking(I2C_CTRL);
    i2c_txByte(I2C_CTRL, 0xAB); i2c_txNackBlocking(I2C_CTRL);

    for (int i=0; i<numOfReads; i++)
    {
        i2c_txByte(I2C_CTRL, 0xFF);

        if (i == numOfReads-1)
        {
        	i2c_txNackBlocking(I2C_CTRL);
        }
        else {
        	i2c_txAckBlocking(I2C_CTRL);
        }

        rd = i2c_rxData(I2C_CTRL);
        if (i==0)
        {
        	statusByte = rd;
        }

        userArray[i] = rd;
    }
    i2c_masterStopBlocking(I2C_CTRL);

	return statusByte;
}


uint32_t Max32664setRegister(uint32_t w1, uint32_t w2, uint32_t w3)
{
	uint32_t rd;
	uint32_t rd1;
	uint32_t rd2;
	uint8_t wds[3];
	uint8_t rds[1];

    bsp_putString("Max32664 WRITE : ");
    uart_writeHex(BSP_UART_TERMINAL, 0xAA); bsp_putString(" ");
    uart_writeHex(BSP_UART_TERMINAL, w1);   bsp_putString(" ");
    uart_writeHex(BSP_UART_TERMINAL, w2);   bsp_putString(" ");
    uart_writeHex(BSP_UART_TERMINAL, w3);   bsp_putString(" ");

    wds[0] = w1;
    wds[1] = w2;
    wds[2] = w3;
    //Max32664Write(w1,w2,w3);
    Max32664Write(sizeof(wds), wds);
    bsp_uDelay(CMD_DELAY);
    Max32664Read(sizeof(rds), rds);

    rd2 = rds[0];
    bsp_putString(" -> RES : ");
	uart_writeHex(BSP_UART_TERMINAL, rd2 & 0xFF); bsp_putString("\r\n")

    bsp_uDelay(100);

	return rd2;

}

uint32_t Max32664getRegister(uint32_t w1, uint32_t w2)
{
	uint8_t wds[2];
	uint8_t rds[2];

    wds[0] = w1;
    wds[1] = w2;
    Max32664Write(sizeof(wds), wds);

    bsp_uDelay(2000);

    Max32664Read(sizeof(rds), rds);

	uart_writeHex(BSP_UART_TERMINAL, rds[0] & 0xFF); bsp_putString(" ");
	uart_writeHex(BSP_UART_TERMINAL, rds[1] & 0xFF); bsp_putString("\r\n")

    bsp_uDelay(100);

	return rds[1];

}


void Max32664reset(uint16_t val)
{
	uint16_t set_val;
	set_val = (gpio_getOutput(GPIO0) & 0xE) | (val & 0x1);
    gpio_setOutput(GPIO0, set_val);
    return;
}

void Max32664mfio(uint16_t val)
{
	uint16_t set_val;
	set_val = (gpio_getOutput(GPIO0) & 0xD) |  ((val & 0x1) << 1);

    gpio_setOutput(GPIO0, set_val);
    return;
}

void Max32664StatusCheck(uint32_t status, char *str)
{
	if (status != SUCCESS)
	{

		bsp_putString(str);
		bsp_putString(" Failed : ");
		uart_writeHex(BSP_UART_TERMINAL, status);
		bsp_putString("\r\n");
	}
}

uint8_t Max32664GetHubStatus()
{
	uint8_t wds[2];
	uint8_t rds[2];

	wds[0] = 0x00;
	wds[1] = 0x00;
	Max32664Write(sizeof(wds), wds);

	bsp_uDelay(CMD_DELAY);

	Max32664Read(sizeof(rds), rds);

	return rds[1];
}

uint8_t Max32664GetNumberOfSamples()
{
	uint8_t wds[2];
	uint8_t rds[2];

	wds[0] = 0x12;
	wds[1] = 0x00;
	Max32664Write(sizeof(wds), wds);

	bsp_uDelay(CMD_DELAY);

	Max32664Read(sizeof(rds), rds);
	//bsp_putString("Number of Samples : ");
	//uart_writeHex(BSP_UART_TERMINAL, rds[1]);
	//bsp_putString("\r\n");

	return rds[1];
}


uint8_t Max32664GetSampleSize()
{
	uint8_t wds[3];
	uint8_t rds[2];

	wds[0] = 0x13;
	wds[1] = 0x00;
	wds[2] = 0x04;
	Max32664Write(sizeof(wds), wds);

	bsp_uDelay(CMD_DELAY);

	Max32664Read(sizeof(rds), rds);
	//bsp_putString("Number of Samples : ");
	//uart_writeHex(BSP_UART_TERMINAL, rds[1]);
	//bsp_putString("\r\n");

	return rds[1];
}


uint8_t Max32664SetSpo2Coeff()
{
	uint8_t wds[7];
	uint8_t rds[2];

	wds[0] = 0x50;
	wds[1] = 0x02;
	wds[2] = 0x0B;
	wds[3] = 0x00;
	wds[4] = 0x02;
	wds[5] = 0x6F;
	wds[6] = 0x60;
	Max32664Write(sizeof(wds), wds);

	bsp_uDelay(CMD_DELAY);

	Max32664Read(sizeof(rds), rds);

	return rds[0];
}

uint8_t Max32664GetFifoData()
{
	uint8_t bpm;
	uint8_t wds[2];
	uint8_t rds[28];
	//uint8_t rds[10];

	wds[0] = 0x12;
	wds[1] = 0x01;
	Max32664Write(sizeof(wds), wds);

	bsp_uDelay(CMD_DELAY);

	Max32664Read(sizeof(rds), rds);

	bsp_putString("--- MAX30101 ---\r\n");
	uart_writeHex(BSP_UART_TERMINAL, rds[1]); bsp_putString(" ");
	uart_writeHex(BSP_UART_TERMINAL, rds[2]); bsp_putString(" ");
	uart_writeHex(BSP_UART_TERMINAL, rds[3]); bsp_putString(" ");
	bsp_putString("\r\n");

	uart_writeHex(BSP_UART_TERMINAL, rds[4]); bsp_putString(" ");
	uart_writeHex(BSP_UART_TERMINAL, rds[5]); bsp_putString(" ");
	uart_writeHex(BSP_UART_TERMINAL, rds[6]); bsp_putString(" ");
	bsp_putString("\r\n");

	uart_writeHex(BSP_UART_TERMINAL, rds[7]); bsp_putString(" ");
	uart_writeHex(BSP_UART_TERMINAL, rds[8]); bsp_putString(" ");
	uart_writeHex(BSP_UART_TERMINAL, rds[9]); bsp_putString(" ");
	bsp_putString("\r\n");

	uart_writeHex(BSP_UART_TERMINAL, rds[10]); bsp_putString(" ");
	uart_writeHex(BSP_UART_TERMINAL, rds[11]); bsp_putString(" ");
	uart_writeHex(BSP_UART_TERMINAL, rds[12]); bsp_putString(" ");
	bsp_putString("\r\n");

	bsp_putString("---HR/SpO2 ---\r\n");
	uart_writeHex(BSP_UART_TERMINAL, rds[13]); bsp_putString(" ");
	uart_writeHex(BSP_UART_TERMINAL, rds[14]); bsp_putString(" ");
	bsp_putString("\r\n");

	uart_writeHex(BSP_UART_TERMINAL, rds[15]); bsp_putString(" ");
	bsp_putString("\r\n");

	uart_writeHex(BSP_UART_TERMINAL, rds[16]); bsp_putString(" ");
	uart_writeHex(BSP_UART_TERMINAL, rds[17]); bsp_putString(" ");
	bsp_putString("\r\n");

	uart_writeHex(BSP_UART_TERMINAL, rds[18]); bsp_putString(" ");
	bsp_putString("\r\n");

	uart_writeHex(BSP_UART_TERMINAL, rds[19]); bsp_putString(" ");
	bsp_putString("\r\n");
	uart_writeHex(BSP_UART_TERMINAL, rds[20]); bsp_putString(" ");
	bsp_putString("\r\n");
	uart_writeHex(BSP_UART_TERMINAL, rds[21]); bsp_putString(" ");
	bsp_putString("\r\n");
	uart_writeHex(BSP_UART_TERMINAL, rds[22]); bsp_putString(" ");
	bsp_putString("\r\n");
	uart_writeHex(BSP_UART_TERMINAL, rds[23]); bsp_putString(" ");
	bsp_putString("\r\n");
	uart_writeHex(BSP_UART_TERMINAL, rds[24]); bsp_putString(" ");
	bsp_putString("\r\n");
	uart_writeHex(BSP_UART_TERMINAL, rds[25]); bsp_putString(" ");
	bsp_putString("\r\n");
	uart_writeHex(BSP_UART_TERMINAL, rds[26]); bsp_putString(" ");
	bsp_putString("\r\n");
	uart_writeHex(BSP_UART_TERMINAL, rds[27]); bsp_putString(" ");
	bsp_putString("\r\n");



	uint16_t heart = (rds[13]<<8) + rds[14];
	uint16_t spo2  = (rds[16]<<8) + rds[17];

	uint32_t heart_reg = (((heart/1000)%10) << 8) + ( ((heart/100) %10) << 4) + ( (heart/10) %10 );
	uint32_t spo2_reg  = (((spo2/1000)%10)  << 8) + ( ((spo2/100) %10)  << 4) + ( (spo2/10)  %10 );

	bsp_putString("Heart Rate: ");

	bsp_printHexDigit( (heart/1000)%10 );
	bsp_printHexDigit( (heart/100) %10 );
	bsp_printHexDigit( (heart/10)  %10 );
	bsp_putString(" [bpm]\r\n");

	write_u32(spo2_reg,   IO_APB_SLAVE_0_INPUT);
	write_u32(heart_reg , IO_APB_SLAVE_0_INPUT + 4);


	return 0;
}



void Max32664Init()
{
	uint8_t wds[4];
	uint8_t rds[1];

    gpio_setOutputEnable(GPIO0, 0x3);
    Max32664mfio(1);
    Max32664reset(0);
    bsp_uDelay(10 * 1000);
    Max32664reset(1);
    bsp_uDelay(1500 * 1000);
    gpio_setOutputEnable(GPIO0, 0x1);

    uint32_t mode = Max32664getRegister(0x02, 0x00);

    bsp_putString("Device Mode = ");
    uart_writeHex(BSP_UART_TERMINAL, mode);
    bsp_putString("\r\n");

    bsp_putString("Deasserted Reset\r\n");

	uint32_t status;

	//status = Max32664SetSpo2Coeff();
	//Max32664StatusCheck(status, "Set SpO2 Coeff.");

	status = Max32664setRegister(0x10, 0x00, 0x03);
	Max32664StatusCheck(status, "SetOutputMode");
	bsp_uDelay(CMD_DELAY);

	//status = Max32664setRegister(0x10, 0x01, 0xF);
	status = Max32664setRegister(0x10, 0x01, 0xF);
	Max32664StatusCheck(status, "Interrupt Threshold");
	bsp_uDelay(CMD_DELAY);

	status = Max32664setRegister(0x52, 0x00, 0x01);
	Max32664StatusCheck(status, "Enable AGC");
	bsp_uDelay(CMD_DELAY);

	/*
	wds[0] = 0x44;
	wds[1] = 0x04;
	wds[2] = 0x01;
	wds[3] = 0x01;
	Max32664Write(sizeof(wds), wds);
	bsp_uDelay(CMD_DELAY);
	Max32664Read(sizeof(rds), rds);
	Max32664StatusCheck(rds[0], "Enable the accelerometer");
	*/


	status = Max32664setRegister(0x44, 0x03, 0x01);
	Max32664StatusCheck(status, "Enable the AFE");

	bsp_uDelay(1500 * 1000);

	status = Max32664setRegister(0x52, 0x02, 0x01);
	Max32664StatusCheck(status, "Enable the HR/SpO2");

	bsp_uDelay(1500 * 1000);

	return;
}

void LoadWait(int load_loopnum)
{
    for(int i=0; i<load_loopnum; i++)
    {
        DummyLoad(1);
    }
    return;
}


void main() {
    static uint8_t status;
    static uint8_t samples;

    uint32_t rd0;
    uint32_t rd1;
    uint32_t rd2;
    uint32_t rd3;
    uint32_t rd4;
    uint32_t rd5;
    unsigned int update_time_us = 4096;
    unsigned int loop_wait_us   = 512;
    unsigned int current_time   = 0;


    bsp_init();
    init();
    bsp_print("i2c 0 demo !");
    Max32664Init();
    bsp_putString("MAX32664 Initialized\r\n");


    WriteInaRegister(0x00, 0x19F);
    WriteInaRegister(0x05, 26843);
    bsp_putString("INA219 Initialized\r\n");

    while(1){

        // MAX32664
    	status  = Max32664GetHubStatus();
    	samples = Max32664GetNumberOfSamples();

    	bsp_putString("---Status ---\r\n");
    	uart_writeHex(BSP_UART_TERMINAL, status);  bsp_putString(" ");
    	uart_writeHex(BSP_UART_TERMINAL, samples); bsp_putString(" ");
    	bsp_putString("\r\n");

    	if ( (status & 0x08) == 0x8)
    	{
    	    Max32664GetFifoData();
    	    //samples = Max32664GetNumberOfSamples();
            //uart_writeHex(BSP_UART_TERMINAL, samples); bsp_putString(" ");
    	}

        //INA219
        rd0 = ReadInaRegister(0x00);
        rd1 = ReadInaRegister(0x01);
        rd2 = ReadInaRegister(0x02);
        rd3 = ReadInaRegister(0x03);
        rd4 = ReadInaRegister(0x04);
        rd5 = ReadInaRegister(0x05);

        uart_writeHex(BSP_UART_TERMINAL, rd2);  bsp_putString(" ");
        uart_writeHex(BSP_UART_TERMINAL, rd3);  bsp_putString(" ");
        uart_writeHex(BSP_UART_TERMINAL, rd4);  bsp_putString(" ");
        uart_writeHex(BSP_UART_TERMINAL, rd5);  bsp_putString(" ");

        uint32_t watt = rd4 * 152 * 12;
        uint32_t watt_reg = (((watt/10000000)%10)  << 16) + ( ((watt/1000000) %10)  << 12)
            		+ ( ((watt/100000) %10)  << 8) + ( ((watt/10000) %10)  << 4) + ( ((watt %1000)%10)  << 0);


        if (current_time >= update_time_us )
        {
            uart_writeHex(BSP_UART_TERMINAL, watt_reg);  bsp_putString(" ");
            bsp_putString("\r\n");
            bsp_putString("\r\n");


            write_u32(watt_reg,   IO_APB_SLAVE_0_INPUT + 8);
            write_u32(0,          IO_APB_SLAVE_0_INPUT + 12);
            write_u32(1,          IO_APB_SLAVE_0_INPUT + 12);
            write_u32(0,          IO_APB_SLAVE_0_INPUT + 12);
            current_time -= update_time_us;
        }

        bsp_putString(" \r\n");

        /*
        if (bool_Load == 1)
        {
            uart_writeHex(BSP_UART_TERMINAL, globalLoad);
            bsp_putString(" \r\n");
        }
        LoadWait(1000000);
        */

    	bsp_uDelay(loop_wait_us);
        current_time += loop_wait_us;
        //uart_writeHex(BSP_UART_TERMINAL, current_time);  bsp_putString(" ");
        bsp_putString("\r\n");


    }
}

#else
void main() {
    bsp_init();
    bsp_print("i2c 0 is disabled, please enable it to run this app");
}
#endif





